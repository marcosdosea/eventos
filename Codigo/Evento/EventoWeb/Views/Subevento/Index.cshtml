@model IEnumerable<EventoWeb.Models.SubeventoModel>

@{
    ViewData["Title"] = "Index";
}



<div>
    <div class="breadcrumb">
         <p style="color:#6C757D;display:inline-block">Subeventos</p>
    </div>

    <h1 class="blue-normal">Verifique os Subeventos de seus Eventos!</h1>
    <h3>Subevento</h3>
    <table class="table table-striped">
        <thead class="blue-normal blue-normal-bg-table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Nome)
                </th>
                <th>
                    Evento
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.DataInicio)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Status)
                </th>
                <th>
                    Tipo de Subevento
                </th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Nome)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.NomeEvento)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DataInicio)
                    </td>
                    <td>
                        @{
                            string statusDescricao = "Desconhecido";
                            switch (item.Status)
                            {
                                case "A":
                                    statusDescricao = "Ativo";
                                    break;
                                case "C":
                                    statusDescricao = "Cadastro";
                                    break;
                                case "F":
                                    statusDescricao = "Finalizado";
                                    break;
                                case "I":
                                    statusDescricao = "Inativo";
                                    break;
                            }
                        }
                        @statusDescricao
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.NomeTipoEvento)
                    </td>
                    <td>
                        @Html.ActionLink("Editar", "Edit", new { id = item.Id }, new { @style = "text-decoration:none;" }) |
                        @{
                            var deleteModel = new EventoWeb.Models.DeleteModel
                {
                    ModalId = "deleteModal-" + item.Id,
                    ActionName = "Delete",
                    ControllerName = "Subevento",
                    RouteValues = item.Id,
                    ConfirmMessage = $"Tem certeza que deseja excluir o subevento \"{item.Nome}\"?",
                    ItemName = item.Nome
                };
                        }

                        <a class="danger-normal" style="text-decoration:none;" href="#!" data-toggle="modal" data-target="#@deleteModel.ModalId">Excluir</a>
                        @await Html.PartialAsync("_DeleteModal", deleteModel)
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <h3 class="blue-normal ">Defina um novo Subevento ao seu Evento!</h3>
    <button type="button" class="btn btn-lg btn-blue-normal"
            onclick="location.href='@Url.Action("Create")'">
        Criar Subevento
    </button>
</div>